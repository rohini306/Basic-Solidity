pragma solidity ^0.6.0;   // Only the owner can see his secret key. Any other account is prevented

contract Ownable {
     owner=msg.sender;

    address owner;

    modifier onlyOwner()
    {
        require(msg.sender==owner,"must be owner")
        _;
    }

}
contract SecretVault {

    String secret;
    

    constructor(String memory _secret) public
    {
        secret=_secret;
        super;
       
    }

    function getSecret() public view returns(String memory){
        return secret;
    }

}

contract MyContract is Ownable{
    
    String secret;
    address secretVault;

    constructor(String memory _secret) public
    {
       
        SecretVault _secretVault=new SecretVault(_secret);
         secret=address(_secretVault);
        super;
       
    }

    function getSecret() public view onlyOwner returns(String memory){

        SecretVault _secretVault=SecretVault(secretVault)
        return _secretVault.getSecret();
    }

    
}
